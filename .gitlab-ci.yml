# .gitlab

workflow:
  name: Build & Deploy
  rules:
    - if: '$CI_COMMIT_BRANCH == "main" || $CI_COMMIT_BRANCH =~ /^feature/'
      when: always
    - if: '$CI_MERGE_REQUEST_SOURCE_BRANCH_NAME =~ /^feature/ && $CI_PIPELINE_SOURCE == "merge_request_event"'
      when: always

include:
  - template: 'Jobs/Code-Quality.gitlab-ci.yml'

stages:
  - build
  - test
  - dev-deploy
  - secure

variables:
  DOCKER_IMAGE_PREFIX: "netflix-app"
  DOCKER_REGISTRY_URL: "registry.local:8443"
  PORT: 8080
  DOCKER_DRIVER: overlay2

docker_build:
  stage: build
  image: docker:24.0.5
  tags:
    - docker
  script:
    - echo "Building Docker image..."
    - docker build --build-arg TMDB_V3_API_KEY=$TMDB_V3_API_KEY -t $DOCKER_IMAGE_PREFIX-tst .
    - docker images $DOCKER_IMAGE_PREFIX-tst
    - mkdir -p image
    - docker save $DOCKER_IMAGE_PREFIX-tst > image/$DOCKER_IMAGE_PREFIX-tst-$CI_PIPELINE_ID.tar
  artifacts:
    when: on_success
    paths:
      - image
    expire_in: 1 day

docker_test:
  stage: build
  image: docker:24.0.5
  needs:
    - docker_build
  tags:
    - docker
  dependencies:
    - docker_build
  script: |
    echo "Loading Docker image..."
    docker load -i image/$DOCKER_IMAGE_PREFIX-tst-$CI_PIPELINE_ID.tar
    echo "Running Docker container..."
    docker run --rm -d --name $DOCKER_IMAGE_PREFIX-tst -p $PORT:80 --network minikube $DOCKER_IMAGE_PREFIX-tst
    export containerIP=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' $DOCKER_IMAGE_PREFIX-tst)
    echo "Container IP: $IP"
    sleep 10
    echo "Checking container status..."
    docker run --rm --network minikube alpine/curl curl --fail http://${containerIP}:80 || { echo "Error: Failed to connect to ${containerIP}:80"; exit 1; }
    echo "Stopping Docker container..."
    docker stop $DOCKER_IMAGE_PREFIX-tst


docker_push:
  stage: build
  needs:
    - docker_build
  image: docker:24.0.5
  tags:
    - docker
  services:
    - docker:24.0.5-dind
  script:
    - HOST="registry.local"
    - PORT=8443
    - echo "Testing connection to $HOST:$PORT"
    - nc -z -w 5 $HOST $PORT
    - if [ $? -ne 0 ]; then echo "Host $HOST:$PORT is not reachable."; exit 1; else echo "Host $HOST:$PORT is reachable."; fi
    - docker load -i image/$DOCKER_IMAGE_PREFIX-tst-$CI_PIPELINE_ID.tar
    - echo "$DOCKER_IMAGE_PREFIX-tst $DOCKER_REGISTRY_URL"
    - docker login -u $REGISTRY_USER -p $REGISTRY_PASSWORD $DOCKER_REGISTRY_URL
    - docker tag $DOCKER_IMAGE_PREFIX-tst $DOCKER_REGISTRY_URL/netflix-app/$DOCKER_IMAGE_PREFIX-tst
    - docker push $DOCKER_REGISTRY_URL/netflix-app/$DOCKER_IMAGE_PREFIX-tst


code_quality:
  stage: ".pre"
  image: docker:latest
  tags:
  - docker
  variables:
    REPORT_FORMAT: html
  after_script: 
    - ls -l 
  artifacts:
    paths: [gl-code-quality-report.html]
    reports:
      codequality: []


sonarqube_scan:
  image: sonarsource/sonar-scanner-cli:latest
  stage: test
  tags:
  - docker
  script:
    - sonar-scanner -Dsonar.projectKey=netflix-app -Dsonar.host.url=http://sonarqube.local:9000 -Dsonar.login=$SONARQUBE_TOKEN
  artifacts:
    paths:
      - sonar-report.json

dependency_check:
  image: owasp/dependency-check:latest
  stage: test
  tags:
  - docker
  script:
    - dependency-check.sh --project netflix-app --scan . --format XML --out .
  artifacts:
    paths:
      - dependency-check-report.xml

trivy_fs_scan:
  image:
    name: docker:latest
  stage: .pre
  services:
    - docker:dind
  tags:
    - docker
  variables:
    DOCKER_DRIVER: overlay2
    TRIVY_CACHE_DIR: $CI_PROJECT_DIR/.trivy-cache
    TRIVY_IMAGE: aquasec/trivy:latest
  before_script:
    - apk add --no-cache curl jq # Install curl and jq
    - docker pull $TRIVY_IMAGE
  script:
    - echo "Running Trivy FS scan..."
    - mkdir -p $TRIVY_CACHE_DIR
    - docker run --rm -v $CI_PROJECT_DIR:/project -v $TRIVY_CACHE_DIR:/root/.cache/ $TRIVY_IMAGE fs --exit-code 0 --format table /project > trivyfs.txt
    - cat trivyfs.txt
  artifacts:
    paths:
      - trivyfs.txt

trivy_fs:
  stage: test
  image: aquasec/trivy:latest
  variables:
    TRIVY_CACHE_DIR: "/root/.cache"
  script:
    - echo "Checking Trivy version..."
    - trivy --version
    - echo "Setting up Trivy cache directory..."
    - mkdir -p $TRIVY_CACHE_DIR
    - echo "Running Trivy scan on the file system..."
    - trivy fs --cache-dir $TRIVY_CACHE_DIR . > trivyfs.txt
    - echo "Displaying Trivy scan results..."
    - cat trivyfs.txt
  artifacts:
    paths:
      - trivyfs.txt
  tags:
    - docker


trivy_image_scan:
  stage: test
  tags:
    - docker
  image:
    name: docker:latest
  services:
    - docker:dind
  variables:
    DOCKER_DRIVER: overlay2
    TRIVY_CACHE_DIR: $CI_PROJECT_DIR/.trivy-cache
    TRIVY_IMAGE: aquasec/trivy:latest
  before_script:
    - apk add --no-cache curl jq  # Install necessary tools
    - docker pull $TRIVY_IMAGE  # Pull the specific Trivy version
  script:
    - export TRIVY_CACHE_DIR=$(pwd)/.trivy-cache
    - mkdir -p $TRIVY_CACHE_DIR
    - docker run --rm -v $TRIVY_CACHE_DIR:/root/.cache/ -v /var/run/docker.sock:/var/run/docker.sock $TRIVY_IMAGE image --cache-dir /root/.cache/ $DOCKER_IMAGE > trivyimage.txt
    - cat trivyimage.txt
  artifacts:
    paths:
      - trivyimage.txt


k8s_dev_deploy:
  stage: dev-deploy
  image: 
    name: wilsongmn/kubectl:alpine3.7
  dependencies:
    - docker_push
  script:
    - HOST="cluster.local"
    - PORT=8443
    - echo "Testing connection to $HOST:$PORT"
    - nc -h
    - nc -z -w 5 $HOST $PORT
    - if [ $? -ne 0 ]; then echo "Host $HOST:$PORT is not reachable."; exit 1; else echo "Host $HOST:$PORT is reachable."; fi
    - export KUBECONFIG=$DEV_KUBE_CONFIG
    - kubectl version -o yaml
    - kubectl config get-contexts
    - kubectl get nodes
    - kubectl apply -f /Kubernetes/deployment.yml
    - kubectl apply -f /Kubernetes/service.yml

dast:
  stage: secure
  tags:
  - docker
  image: docker:latest
  dependencies:
    - k8s_dev_deploy
  variables:
    DNS_HOSTNAME: "cluster.local"
  script:
    - echo "Dinamic application segurity testing"